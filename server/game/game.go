package game

import "log"

type position = int

type size struct {
	x position
	y position
}

var Settings = struct {
	TickRate    uint8
	FieldSize   size // dimensions of the field
	SpriteSize  size
	PlayerSpeed position // pixels traveled per tick
}{
	TickRate:    60,
	FieldSize:   size{600, 600}, // TODO: share with client
	SpriteSize:  size{100, 100},
	PlayerSpeed: 7,
}

////////////////////////////////////////////////////////////////////////////////

type PlayerId = string

type Player struct {
	Id PlayerId `json:"id"`
	X  position `json:"x"`
	Y  position `json:"y"`
}

func NewPlayer(id PlayerId) *Player {
	return &Player{
		Id: id,
		X:  0,
		Y:  0,
	}
}

type players = map[PlayerId]*Player

////////////////////////////////////////////////////////////////////////////////

type timestamp = uint64

type inputState struct {
	Up    bool `json:"up"`
	Down  bool `json:"down"`
	Left  bool `json:"left"`
	Right bool `json:"right"`
}

// Generated by the game engine,
type GameEvent struct {
	TimestampMs timestamp  `json:"timestampMs"`
	PlayerId    PlayerId   `json:"playerId"`
	InputState  inputState `json:"inputState"`
}

////////////////////////////////////////////////////////////////////////////////

type Game struct {
	Players players `json:"players"`
}

func New() *Game {
	return &Game{
		Players: players{},
	}
}

func (g *Game) AddPlayer(playerId string) {
	// DEBUG
	log.Println("Added player:", playerId)

	g.Players[playerId] = NewPlayer(playerId)
}

func (g *Game) RemovePlayer(playerId string) {
	log.Println("Removed player:", playerId)
	delete(g.Players, playerId)
}

/*
Set the fields of Game, given a queue of GameEvents
TODO: pre-sort inputs?
TODO: sprite:sprite collision detection
*/
func (g *Game) Update(e GameEvent) {
	player := g.Players[e.PlayerId]
	speed := Settings.PlayerSpeed
	fieldSize := Settings.FieldSize
	spriteSize := Settings.SpriteSize

	// NOTE: inverted directions like css
	if e.InputState.Up {
		player.Y = max(player.Y-speed, 0)
	}
	if e.InputState.Down {
		player.Y = min(player.Y+speed, fieldSize.y-spriteSize.y)
	}
	if e.InputState.Left {
		player.X = max(player.X-speed, 0)
	}
	if e.InputState.Right {
		player.X = min(player.X+speed, fieldSize.y-spriteSize.y)
	}
}
