package game

import "log"

type position = uint16

type fieldSize struct {
	x position
	y position
}

var Settings = struct {
	TickRate    uint8
	FieldSize   fieldSize // dimensions of the field
	PlayerSpeed position  // pixels traveled per tick
}{
	TickRate:    60,
	FieldSize:   fieldSize{300, 300},
	PlayerSpeed: 10,
}

////////////////////////////////////////////////////////////////////////////////

type playerId = string

type player struct {
	id playerId
	x  position
	y  position
}

type players = map[playerId]*player

////////////////////////////////////////////////////////////////////////////////

type timestamp = uint64

type inputState struct {
	Up    bool
	Down  bool
	Left  bool
	Right bool
}

// Generated by the game engine,
type GameEvent struct {
	TimestampMs timestamp
	PlayerId    playerId
	InputState  inputState
}

////////////////////////////////////////////////////////////////////////////////

/* TODO:
client sends only input state and timestamp
*/

type Game struct {
	Players players
}

func New() *Game {
	return &Game{
		Players: players{},
	}
}

func (g *Game) AddPlayer(playerId string) {
	log.Println("Added player:", playerId)
	g.Players[playerId] = &player{}
}

func (g *Game) RemovePlayer(playerId string) {
	log.Println("Removed player:", playerId)
	delete(g.Players, playerId)
}

/* Set the fields of Game, given a queue of GameEvents */
func (g *Game) Update(e GameEvent) {
	// TODO: set properties of game...
	// TODO: process PRE-SORTED inputs
	// TODO: update player positions
	// TODO: does this cause a race condition?

	log.Println("GAME EVENT:", e)
	if e.InputState.Up {
		g.Players[e.PlayerId].y += Settings.PlayerSpeed
	}
	if e.InputState.Down {
		g.Players[e.PlayerId].y -= Settings.PlayerSpeed
	}
	if e.InputState.Left {
		g.Players[e.PlayerId].x += Settings.PlayerSpeed
	}
	if e.InputState.Right {
		g.Players[e.PlayerId].x -= Settings.PlayerSpeed
	}
	// TODO: stop movement past field bounds

	// ... hub will serialize and send, and handle closing the event channel
	log.Println("UPDATED GAME STATE")
}
